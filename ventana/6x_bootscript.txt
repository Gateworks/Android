echo "Gateworks Ventana Android Boot script v1.01"

# set some defaults
test -n "$fs"    || fs=ext2
test -n "$disk"  || disk=0
test -n "$mem"   || mem="cma=384M"
setenv nextcon 0
setenv bootargs "console=${console},${baudrate} ${mem}"
setenv loadaddr 10800000
setenv fdt_addr 18000000

if test -n "$tempfuse" ; then
	setenv bootargs "${bootargs}" thermal.fusedata=$tempfuse
fi

# detect displays in the following priority: LVDS, HDMI
# setenv panel to override detection for a single display:
#    Hannstar-XGA|AUO-G070VW01|HDMI
# or setenv video if you want multiple displays and you know what you are doing
if test -n "$video" ; then
  echo "using video config from env: $video"
else
if test -n "$panel" ; then
  echo "using panel from env: $panel"
else
  echo "Detecting displays..."
  i2c dev 2
  if i2c probe 0x04 ; then
	echo "  Freescale MXC-LVDS1 detected"
	setenv panel $panel "Hannstar-XGA"
  fi
  if i2c probe 0x49 ; then
	echo "  AUO G070VW01 with TSC2007 detected"
	setenv panel $panel "AUO-G070VW01"
  fi
  if hdmidet ; then
	echo "  HDMI detected"
	setenv panel $panel "HDMI"
  fi
fi

# configure displays
echo "Configuring kernel bootargs for display(s): $panel"
for p in ${panel}; do
  if itest.s "x${p}" == "xHannstar-XGA" ; then
	echo "  mxcfb${nextcon}: Freescale MXC-LVDS1"
	setenv bootargs "${bootargs}" video=mxcfb${nextcon}:dev=ldb,bpp=32,if=RGB666
	setexpr nextcon $nextcon + 1

  elif itest.s "x${p}" == "xAUO-G070VW01" ; then
	echo "  mxcfb${nextcon}: AUO G070VW01"
	setenv bootargs "${bootargs}" video=mxcfb${nextcon}:dev=ldb,bpp=32,if=RGB666
	setexpr nextcon $nextcon + 1

  elif itest.s "x${p}" == "xHDMI" ; then
	test -n "$hdmi" || hdmi=1080p
	if itest.s "x${hdmi}" == "x1080p" ; then
		setenv hdmi "1920x1080M@60"
	elif itest.s "x${hdmi}" == "x720p" ; then
		setenv hdmi "1280x720M@60"
	elif itest.s "x${hdmi}" == "x480p" ; then
		setenv hdmi "720x480M@60"
	fi
	echo "  mxcfb${nextcon}: HDMI ($hdmi)"
	setenv bootargs "${bootargs}" video=mxcfb${nextcon}:dev=hdmi,bpp=32,${hdmi},if=RGB24
	setexpr nextcon $nextcon + 1

  else
        echo "${p} not supported"
  fi
done

# disable remaining mxcfb devices
while test "4" -ne $nextcon ; do
	setenv bootargs "${bootargs}" video=mxcfb${nextcon}:off
	setexpr nextcon $nextcon + 1
done
fi


# detect dtype and bootdev by looking for kernel on media the bootloader
# has mounted (in order of preference: usb/mmc/sata)
#
# This assumes the bootloader has already started the respective subsystem
# or mounted the filesystem if appropriate to get to this bootscript
#
# To Speed up boot set dtype manually
if test -n "$dtype" ; then
	echo "booting from $dtype"
else
	echo "Detecting boot device (dtype)..."
	if ${fs}load usb ${disk}:1 ${loadaddr} boot/uImage ; then
		dtype=usb
	elif ${fs}load mmc ${disk}:1 ${loadaddr} boot/uImage ; then
		dtype=mmc
	elif ${fs}load sata ${disk}:1 ${loadaddr} boot/uImage ; then
		dtype=sata
	elif ubifsload ${loadaddr} boot/uImage ; then
		dtype=nand
	fi
	echo "detected dtype:$dtype"
fi
if test -n "$bootdev" ; then
	echo "Using bootdev from env: $bootdev"
else
	if itest.s "x${dtype}" == "xmmc" ; then
		bootdev=mmcblk2
	else
		bootdev=sda
	fi
fi

setenv bootargs "${bootargs}" androidboot.hardware=freescale androidboot.console=${console} androidboot.product.model=${model} androidboot.serialno=${serial#} 

if itest.s "x${dtype}" == "xnand" ; then
	echo "Booting from NAND..."
	setenv bootargs "${bootargs}" androidboot.mode=nand ubi.mtd=2
	# disable selinux until we get policy config figured out
	setenv bootargs "${bootargs}" selinux=0
	setenv fsload ubifsload
else
	echo "Booting from block device ${bootdev}..."
	setenv bootargs "${bootargs}" androidboot.mode=block androidboot.bootdev=${bootdev}
	setenv fsload "${fs}load ${dtype} ${disk}:1"
fi

setenv bootargs "${bootargs}" "${extra}"
if ${fsload} ${loadaddr} boot/uImage; then
	if ${fsload} ${fdt_addr} boot/${fdt_file}; then
		echo Loaded DTB from boot/${fdt_file}
		bootm ${loadaddr} - ${fdt_addr}
	elif ${fsload} ${fdt_addr} boot/${fdt_file1}; then
		echo Loaded DTB from boot/${fdt_file1}
		bootm ${loadaddr} - ${fdt_addr}
	elif ${fsload} ${fdt_addr} boot/${fdt_file2}; then
		echo Loaded DTB from boot/${fdt_file2}
		bootm ${loadaddr} - ${fdt_addr}
	else
		echo "Error loading device-tree"
	fi
else
	echo "Error loading kernel image"
fi
