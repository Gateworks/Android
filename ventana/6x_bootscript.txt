echo "Gateworks Ventana Android Boot script v1.01"

setenv bootargs enable_wait_mode=off
setenv nextcon 0
setenv bootargs "${bootargs}" console=${console},${baudrate} consoleblank=0

# memory configuration
if test -n "$mem" ; then
  echo "using mem from env: $mem"
else
  if itest.s "x${mem_mb}" == "x512" ; then
    echo "Detected 512MB DRAM - adjusting GPU memory allocation"
    setenv mem "vmalloc=400M gpumem=96M"
  else
    setenv mem "vmalloc=400M"
  fi
fi
setenv bootargs "${bootargs}" "${mem}"

# detect displays in the following priority: LVDS, HDMI
if test -n "$panel" ; then
else
  echo "Detecting displays..."
  i2c dev 2
  if i2c probe 0x04 ; then
	echo "  Freescale MXC-LVDS1 detected"
	setenv panel $panel "Hannstar-XGA"
  fi
  if i2c probe 0x49 ; then
	echo "  AUO G070VW01 with TSC2007 detected"
	setenv panel $panel "AUO-G070VW01"
  fi
  if hdmidet ; then
	echo "  HDMI detected"
	setenv panel $panel "HDMI"
  fi
fi

# configure displays
echo "Configuring kernel bootargs for display(s): $panel"
for p in ${panel}; do
  if itest.s "x${p}" == "xHannstar-XGA" ; then
	echo "  mxcfb${nextcon}: Freescale MXC-LVDS1"
	setenv bootargs "${bootargs}" video=mxcfb${nextcon}:dev=ldb,bpp=32,LDB-XGA,if=RGB666
	if test "0" -eq $nextcon; then
		setenv fbmem "fbmem=20M"
	else
		setenv fbmem ${fbmem},20M
	fi
	setexpr nextcon $nextcon + 1

  elif itest.s "x${p}" == "xAUO-G070VW01" ; then
	echo "  mxcfb${nextcon}: AUO G070VW01"
	setenv bootargs "${bootargs}" video=mxcfb${nextcon}:dev=ldb,bpp=32,LDB-WVGA,if=RGB666
	if test "0" -eq $nextcon; then
		setenv fbmem "fbmem=20M"
	else
		setenv fbmem ${fbmem},20M
	fi
	setexpr nextcon $nextcon + 1

  elif itest.s "x${p}" == "xHDMI" ; then
	test -n "$hdmi" || hdmi=1080p
	if itest.s "x${hdmi}" == "x1080p" ; then
		setenv hdmi "1920x1080M@60"
	elif itest.s "x${hdmi}" == "x720p" ; then
		setenv hdmi "1280x720M@60"
	elif itest.s "x${hdmi}" == "x480p" ; then
		setenv hdmi "720x480M@60"
	fi
	echo "  mxcfb${nextcon}: HDMI ($hdmi)"
	setenv bootargs "${bootargs}" video=mxcfb${nextcon}:dev=hdmi,bpp=32,${hdmi},if=RGB24
	if test "0" -eq $nextcon; then
		setenv fbmem "fbmem=48M"
	else
		setenv fbmem ${fbmem},48M
	fi
	setexpr nextcon $nextcon + 1

  else
        echo "${p} not supported"
  fi
done

# disable remaining mxcfb devices
while test "4" -ne $nextcon ; do
	setenv bootargs "${bootargs}" video=mxcfb${nextcon}:off
	setexpr nextcon $nextcon + 1
done

# boot disks
test -n "$fs"    || fs=ext2
test -n "$disk"  || disk=0
if test -n "$dtype" ; then
	echo "Using dtype from env: $dtype"
else
	echo "Detecting boot device (dtype)..."
	if ${fs}load usb ${disk}:1 10800000 boot/uImage ; then
		dtype=usb
	elif ${fs}load mmc ${disk}:1 10800000 boot/uImage ; then
		dtype=mmc
	elif ${fs}load sata ${disk}:1 10800000 boot/uImage ; then
		dtype=sata
	fi
	echo "dtype:$dtype"
fi
if test -n "$bootdev" ; then
	echo "Using androidboot.bootdev=$bootdev"
else
	if itest.s "x${dtype}" == "xusb" ; then
		if test -n "$usbdevport" ; then
			bootdev=fsl-ehci.${usbdevport}
			if itest "${usbdevport}" == 0 ; then
				echo "USB0: OTG"
			elif itest "${usbdevport}" == 1 ; then
				echo "USB1: EHCI"
			else
				echo "Unsuported USB host controller:$usbdevport"
			fi
		else
			bootdev=fsl-ehci.1
		fi
	elif itest.s "x${dtype}" == "xmmc" ; then
		bootdev=sdhci-esdhc-imx.2
	elif itest.s "x${dtype}" == "xsata" ; then
		bootdev=ahci.0
	else
		echo "Unsupported dtype:${dtype}"
	fi
	echo "androidboot.bootdev=$bootdev"
fi

setenv bootargs "${bootargs}" androidboot.hardware=freescale androidboot.bootdev=$bootdev androidboot.serialno=${serial#} androidboot.product.model=${model} ${extra}

${fs}load ${dtype} ${disk}:1 10800000 boot/uImage && ${fs}load ${dtype} ${disk}:1 12800000 boot/uramdisk.img && bootm 10800000 12800000

echo "Error loading kernel image"
